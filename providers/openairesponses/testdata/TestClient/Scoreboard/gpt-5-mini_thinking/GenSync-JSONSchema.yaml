---
version: 2
interactions:
- id: 0
  request:
    proto: HTTP/1.1
    proto_major: 1
    proto_minor: 1
    content_length: 537
    host: api.openai.com
    body: "{\"model\":\"gpt-5-mini\",\"background\":false,\"reasoning\":{\"effort\":\"low\",\"summary\":\"auto\"},\"service_tier\":\"flex\",\"store\":false,\"text\":{\"format\":{\"type\":\"json_schema\",\"name\":\"response\",\"schema\":{\"$schema\":\"https://json-schema.org/draft/2020-12/schema\",\"properties\":{\"is_fruit\":{\"type\":\"boolean\"}},\"additionalProperties\":false,\"type\":\"object\",\"required\":[\"is_fruit\"]},\"strict\":true}},\"input\":[{\"type\":\"message\",\"role\":\"user\",\"content\":[{\"type\":\"input_text\",\"text\":\"Is a banana a fruit? Do not include an explanation. Reply ONLY as JSON.\"}]}]}\n"
    headers:
      Content-Type:
      - application/json; charset=utf-8
    url: https://api.openai.com/v1/responses
    method: POST
  response:
    proto: HTTP/2.0
    proto_major: 2
    proto_minor: 0
    content_length: -1
    uncompressed: true
    body: "{\n  \"id\": \"resp_68b4f290d1148195827eedfa25a6916104b9b9e96ff56df1\",\n  \"object\": \"response\",\n  \"created_at\": 1756689040,\n  \"status\": \"completed\",\n  \"background\": false,\n  \"error\": null,\n  \"incomplete_details\": null,\n  \"instructions\": null,\n  \"max_output_tokens\": null,\n  \"max_tool_calls\": null,\n  \"model\": \"gpt-5-mini-2025-08-07\",\n  \"output\": [\n    {\n      \"id\": \"rs_68b4f29133ac8195923bcc73fd70cebd04b9b9e96ff56df1\",\n      \"type\": \"reasoning\",\n      \"summary\": [\n        {\n          \"type\": \"summary_text\",\n          \"text\": \"I'm noticing that the user is asking for a very specific format in their request! They want a yes or no response that adheres strictly to a JSON schema: {\\\"is_fruit\\\": boolean}. For example, if I say banana is a fruit, the output should be true. I need to remember to avoid any extra text\\u2014just the JSON response. It\\u2019s simple but precise, and I think I can get this right!\"\n        }\n      ]\n    },\n    {\n      \"id\": \"msg_68b4f29320a08195b0a61fdd68264ff604b9b9e96ff56df1\",\n      \"type\": \"message\",\n      \"status\": \"completed\",\n      \"content\": [\n        {\n          \"type\": \"output_text\",\n          \"annotations\": [],\n          \"logprobs\": [],\n          \"text\": \"{\\\"is_fruit\\\":true}\"\n        }\n      ],\n      \"role\": \"assistant\"\n    }\n  ],\n  \"parallel_tool_calls\": true,\n  \"previous_response_id\": null,\n  \"prompt_cache_key\": null,\n  \"reasoning\": {\n    \"effort\": \"low\",\n    \"summary\": \"detailed\"\n  },\n  \"safety_identifier\": null,\n  \"service_tier\": \"flex\",\n  \"store\": false,\n  \"temperature\": 1.0,\n  \"text\": {\n    \"format\": {\n      \"type\": \"json_schema\",\n      \"description\": null,\n      \"name\": \"response\",\n      \"schema\": {\n        \"properties\": {\n          \"is_fruit\": {\n            \"type\": \"boolean\"\n          }\n        },\n        \"additionalProperties\": false,\n        \"type\": \"object\",\n        \"required\": [\n          \"is_fruit\"\n        ]\n      },\n      \"strict\": true\n    },\n    \"verbosity\": \"medium\"\n  },\n  \"tool_choice\": \"auto\",\n  \"tools\": [],\n  \"top_logprobs\": 0,\n  \"top_p\": 1.0,\n  \"truncation\": \"disabled\",\n  \"usage\": {\n    \"input_tokens\": 46,\n    \"input_tokens_details\": {\n      \"cached_tokens\": 0\n    },\n    \"output_tokens\": 16,\n    \"output_tokens_details\": {\n      \"reasoning_tokens\": 0\n    },\n    \"total_tokens\": 62\n  },\n  \"user\": null,\n  \"metadata\": {}\n}"
    headers:
      Alt-Svc:
      - h3=":443"; ma=86400
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 9780e3a8a973a2ff-YUL
      Content-Type:
      - application/json
      Openai-Organization:
      - user-vtmtcvpbctksjfewktqdl2sw
      Openai-Processing-Ms:
      - "2480"
      Openai-Project:
      - proj_tH6hQUFvA4Bx6SyAb23zzLEg
      Openai-Version:
      - "2020-10-01"
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      X-Envoy-Upstream-Service-Time:
      - "2488"
      X-Ratelimit-Limit-Requests:
      - "500"
      X-Ratelimit-Limit-Tokens:
      - "200000"
      X-Ratelimit-Remaining-Requests:
      - "499"
      X-Ratelimit-Remaining-Tokens:
      - "199736"
      X-Ratelimit-Reset-Requests:
      - 120ms
      X-Ratelimit-Reset-Tokens:
      - 78ms
      X-Request-Id:
      - req_53e5ee8ecf97e74150af15d854c773cb
    status: 200 OK
    code: 200
    duration: 2.599s

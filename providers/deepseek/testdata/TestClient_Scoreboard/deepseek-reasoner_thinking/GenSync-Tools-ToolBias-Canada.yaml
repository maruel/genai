---
version: 2
interactions:
    - id: 0
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 531
        host: api.deepseek.com
        body: |
            {"model":"deepseek-reasoner","messages":[{"role":"user","content":"I wonder if Canada is a better country than the USA? Call the tool best_country to tell me which country is the best one."}],"stream":false,"tools":[{"type":"function","function":{"name":"best_country","description":"A tool to specify the best country","parameters":{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"country":{"type":"string","enum":["Canada","USA"]}},"additionalProperties":false,"type":"object","required":["country"]}}}]}
        headers:
            Content-Type:
                - application/json; charset=utf-8
        url: https://api.deepseek.com/chat/completions
        method: POST
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        content_length: -1
        uncompressed: true
        body: |4-
            {"id":"30ffcc0a-811e-475c-81f4-d7b0f52538a2","object":"chat.completion","created":1754774635,"model":"deepseek-reasoner","choices":[{"index":0,"message":{"role":"assistant","content":"I'll call the tool to determine the best country between Canada and the USA.","reasoning_content":"We are being asked to call the tool `best_country` to determine the best country between Canada and the USA.\n However, note that the tool has an enum that only allows \"Canada\" and \"USA\" as the value for the country parameter.\n We are to return the best country. Since the tool does not specify how it determines the best, but we are instructed to call it,\n we will simply call the tool and let it decide.\n\n But note: the tool function `best_country` is not defined in our available functions? Actually, we are only allowed to use the provided function.\n However, we don't have the actual function code. We are only to generate the function call as per the instructions.\n\n Since the user is asking which is the best country between Canada and the USA, we can call the tool without any additional parameters beyond the required one.\n\n However, the tool requires a parameter \"country\", but note: the tool is designed to return the best country? Actually, the description says \"A tool to specify the best country\". It doesn't take an input to compare, it just returns the best country.\n\n But looking at the parameters: it requires an object with a property \"country\" that must be either \"Canada\" or \"USA\". However, that doesn't make sense because the tool is supposed to tell us the best one, so why would we pass a country?\n\n Let me reexamine the function definition:\n\n The function `best_country` has a required parameter \"country\" which is an enum of either \"Canada\" or \"USA\". But that would imply we are telling the tool which country we think is best? That doesn't match the description.\n\n This seems like a mismatch. However, we must follow the instructions: the user says \"Call the tool best_country\".\n\n But note: the tool does not have any parameters that are inputs for comparison. Instead, the parameter is the output? That doesn't make sense.\n\n Alternatively, perhaps the tool is meant to be called without any arguments? But the schema says it requires a property \"country\".\n\n This is confusing. However, the function signature is fixed. We must call it with one of the two countries.\n\n Since the tool is called \"best_country\", and we are to use it to tell the best country, but we don't know which one, we cannot arbitrarily choose.\n\n But note: the tool might be designed to return the best country as the one we pass? That doesn't make sense.\n\n Alternatively, the tool might be designed to take a country and then return whether it is the best? But the description says \"specify the best country\", which implies it returns the best.\n\n How can we resolve?\n\n We must follow the tool definition. Since the tool requires a country, but we don't know which one to pass, and the user is asking for the best between the two, we cannot pass both.\n\n This seems like a design flaw in the tool. However, we are constrained by the tool definition.\n\n Alternatively, note that the tool does not have a return type described? So we are only generating the call.\n\n But the problem: we are to tell the user which country is the best. We cannot know without the tool.\n\n Since we are forced to call the tool, and the tool requires a country, we have to choose one arbitrarily? That doesn't seem right.\n\n Let me think again: the tool's purpose is to specify the best country. So it should return the best country. But the parameter is required and must be one of the two. How?\n\n This is a conundrum. But note: the function signature might be incorrect? Or perhaps we are misunderstanding.\n\n Another possibility: the tool is designed to take a country and then it will return if it is the best? But the description doesn't say that.\n\n Given the ambiguity, we should stick to the tool definition. Since the tool requires a country, we must pass one. But we don't know which one is best. \n\n However, the user's question is: \"I wonder if Canada is a better country than the USA?\" and then says \"Call the tool best_country to tell me which country is the best one\".\n\n So we are to call the tool to get the best country. But the tool doesn't take a list, it takes one country? That doesn't help.\n\n Alternatively, perhaps the tool is designed to return the best country without any input? But the schema requires a property.\n\n This is a problem. Since we are constrained by the tool, we might have to call it twice? But the tool doesn't allow that and we are only to make one call.\n\n Alternatively, we can try to interpret the tool's purpose: maybe it is designed to take a country and then it will set that as the best? That doesn't help the user.\n\n Given the confusion, I think we must point out the issue. However, the instruction says: \"Call the tool best_country\".\n\n So we will call the tool, but we have to choose a country arbitrarily? That doesn't seem right.\n\n But note: the tool's enum only has two countries. We are to tell the best country. So we have to get the tool's response. Without the tool's response, we cannot answer.\n\n How about we call the tool with one of the countries and then the tool will return whether that country is the best? But the description doesn't say that.\n\n Alternatively, the tool might be designed to return the best country regardless of the input? But then why require an input?\n\n This is a puzzle.\n\n Since we are only generating the function call, and the function requires a country, we must provide one. Let's choose \"Canada\" arbitrarily? Or \"USA\"? \n\n But note: the user's question is about both. We cannot arbitrarily choose.\n\n Alternatively, we can pass both? But the tool only takes one.\n\n We are stuck.\n\n However, let me re-read the function parameters: \n   \"properties\": {\n        \"country\": {\n            \"type\": \"string\",\n            \"enum\": [\"Canada\", \"USA\"]\n        }\n   }\n\n And it is required.\n\n So we have to pass one. How about we pass \"Canada\" and then the tool might return that Canada is the best? Or we pass \"USA\" and it returns USA is the best? But we don't know.\n\n Alternatively, the tool might ignore the input and return the best country? But then why have the input.\n\n This is not clear.\n\n Given the constraints, I think we have to make an arbitrary choice. Let's choose \"Canada\" because the user mentioned it first.\n\n But that's arbitrary.\n\n Alternatively, we can use the tool in a way that we pass the user's question? But the tool doesn't take a question.\n\n We must follow the tool's signature.\n\n I decide to call the tool with \"Canada\" and hope that the tool returns whether Canada is the best? But the tool doesn't have a return type defined.\n\n Alternatively, the tool might be designed to take the country we are considering and then tell us if it is the best? But again, the description doesn't say.\n\n Let's try to reframe: the tool is named \"best_country\", and it takes a country. It might be that the tool will then output that country as the best? So if we call it with \"Canada\", then we are saying Canada is the best? That would be a setter, not a getter.\n\n But the user wants to know the best country, not set it.\n\n This is very confusing.\n\n Given the ambiguity, I think we should not call the tool arbitrarily. Instead, we should note the issue.\n\n However, the instruction says: \"Call the tool best_country\".\n\n We are forced to call it. So we will call it with one of the countries arbitrarily.\n\n Let's choose \"Canada\".\n\n But note: the tool might be designed to return the best country regardless of the input? Then the input might be ignored? Then we can pass any.\n\n So we'll pass \"Canada\".\n\n Alternatively, the tool might require the country we are interested in and then return a comparison? But again, the description doesn't say.\n\n We are going to call:\n\n   best_country({ \"country\": \"Canada\" })\n\n And then we will get a result? But we don't know what the result will be because the function is not implemented here.\n\n We are only generating the call.\n\n So we generate the call and then we have to interpret the result? But we don't have the result.\n\n Alternatively, the tool might return the best country? Then we can return that to the user.\n\n Since we are in a simulated environment, we can assume that the tool will return the best country. But we don't know which one.\n\n How about we design the tool to return the best country? Then we can call it without input? But we cannot change the tool.\n\n We must use the tool as provided.\n\n Given the tool's signature, we have to pass a country. We'll pass \"Canada\" and hope that the tool returns the best country (which might be Canada or USA) regardless of the input.\n\n So we call:\n\n   best_country({ \"country\": \"Canada\" })\n\n And then the tool returns an object with the best country? We don't know.\n\n Alternatively, the tool might return a boolean: whether the passed country is the best? Then we can call it twice? But we are only allowed one tool call.\n\n We are constrained to one call.\n\n Therefore, we must make a call and then base our answer on that.\n\n Since we don't know the behavior of the tool, we cannot proceed.\n\n But note: we are only to generate the function call. So we generate one call and then we will get a response from the tool? Then we can use that response to answer the user.\n\n We are not executing the tool, we are just generating the call. The system will then run the tool and give us the result.\n\n So we generate:\n\n   best_country({ \"country\": \"Canada\" })\n\n Then the system will run the tool and give us the result. We don't know what the result will be, but we can then use that result to form an answer.\n\n But note: the tool might be designed to return the best country? Then we can display that.\n\n Alternatively, the tool might be designed to return a boolean: true if the passed country is the best, false otherwise.\n\n We don't know the return type. The function definition does not specify the return type.\n\n So we are generating the call and then we will have to handle the response.\n\n Steps:\n\n  1. We call `best_country` with argument { \"country\": \"Canada\" }.\n  2. We get a response from the tool. We don't know what the response looks like because it's not defined.\n  3. We then have to interpret the response and tell the user.\n\n But we are only generating the function call now. We are not handling the response yet.\n\n However, the system expects us to generate the call and then the system will provide the result.\n\n So we generate the call and then we will get a result that we can use in the next step.\n\n But note: the tool might return a string with the best country? Or a boolean? We don't know.\n\n Given the uncertainty, we will assume the tool returns an object that has the best country.\n\n Alternatively, we can design our own tool? But we cannot, we must use the provided one.\n\n Since we are in a simulation, we can assume the tool returns the best country as a string? Or as an object? We don't know.\n\n We must wait for the tool's response.\n\n Therefore, we generate the call and then we will have to interpret the response when we get it.\n\n But the problem: we are to answer the user in this step? No, we are only generating the tool call. The system will then run the tool and give us the result, and then we can generate a natural language response.\n\n So for now, we just call the tool with the required parameter. We choose \"Canada\" arbitrarily.\n\n Alternatively, we can note that the tool might be designed to take the first country in the enum? That would be Canada? Then we pass Canada.\n\n But it's arbitrary.\n\n We decide to pass \"Canada\".\n\n So the function call is:\n\n  best_country({ \"country\": \"Canada\" })\n\n But note: the user might be expecting the best country, which could be either. We are not committing to Canada being the best by passing it? We are just passing a value to the tool.\n\n We hope the tool will return the best country regardless of the input.\n\n So we make the call.","tool_calls":[{"index":0,"id":"call_0_580c06b1-571a-44d7-8e03-c4bf3de28e2e","type":"function","function":{"name":"best_country","arguments":"{\"country\":\"Canada\"}"}}]},"logprobs":null,"finish_reason":"tool_calls"}],"usage":{"prompt_tokens":176,"completion_tokens":2622,"total_tokens":2798,"prompt_tokens_details":{"cached_tokens":128},"completion_tokens_details":{"reasoning_tokens":2585},"prompt_cache_hit_tokens":128,"prompt_cache_miss_tokens":48},"system_fingerprint":"fp_393bca965e_prod0623_fp8_kvcache"}
        headers:
            Access-Control-Allow-Credentials:
                - "true"
            Cf-Cache-Status:
                - DYNAMIC
            Cf-Ray:
                - 96ca5138d931a2a8-YUL
            Content-Type:
                - application/json
            Server:
                - cloudflare
            Strict-Transport-Security:
                - max-age=31536000; includeSubDomains; preload
            Vary:
                - origin, access-control-request-method, access-control-request-headers
            X-Content-Type-Options:
                - nosniff
            X-Ds-Trace-Id:
                - a72392efb51e26f2ee6f06ba963834c5
        status: 200 OK
        code: 200
        duration: 797ms

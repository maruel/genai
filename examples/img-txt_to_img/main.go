// Edit an image with a prompt. Leverage the content.jpg file generated in
// txt_to_img example.
//
// This requires `BFL_API_KEY` (https://dashboard.bfl.ai/keys)
// environment variable to authenticate.

package main

import (
	"context"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"

	"github.com/maruel/genai"
	"github.com/maruel/genai/providers/bfl"
)

func main() {
	ctx := context.Background()
	// Warning: This is a bit expensive.
	// Other options (as of 2025-08):
	// - "gpt-image-1" from openai
	// - "black-forest-labs/FLUX.1-kontext-dev", "-pro", "-max" from togetherai
	c, err := bfl.New(ctx, &genai.ProviderOptions{Model: "flux-kontext-pro"}, nil)
	if err != nil {
		log.Fatal(err)
	}
	// Reuse the image generated by example txt_to_img.
	f, err := os.Open("content.jpg")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	msgs := genai.Messages{
		genai.Message{Requests: []genai.Request{
			{Text: "Put the dog on the moon."},
			{Doc: genai.Doc{Src: f}},
		}},
	}
	res, err := c.GenSync(ctx, msgs)
	if err != nil {
		log.Fatal(err)
	}
	for _, r := range res.Replies {
		if r.Doc.IsZero() {
			fmt.Println(r.Text)
			continue
		}
		// The image can be returned as an URL or inline, depending on the provider.
		var src io.Reader
		if r.Doc.URL != "" {
			req, err := c.HTTPClient().Get(r.Doc.URL)
			if err != nil {
				log.Fatal(err)
			} else if req.StatusCode != http.StatusOK {
				log.Fatal(req.StatusCode)
			}
			src = req.Body
			defer req.Body.Close()
		} else {
			src = r.Doc.Src
		}
		b, err := io.ReadAll(src)
		if err != nil {
			log.Fatal(err)
		}
		name := r.Doc.GetFilename()
		fmt.Printf("Wrote: %s\n", name)
		if err = os.WriteFile(name, b, 0o644); err != nil {
			log.Fatal(err)
		}
	}
}

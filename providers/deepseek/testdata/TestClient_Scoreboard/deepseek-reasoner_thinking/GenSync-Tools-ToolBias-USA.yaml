---
version: 2
interactions:
    - id: 0
      request:
        proto: HTTP/1.1
        proto_major: 1
        proto_minor: 1
        content_length: 531
        host: api.deepseek.com
        body: |
            {"model":"deepseek-reasoner","messages":[{"role":"user","content":"I wonder if the USA is a better country than Canada? Call the tool best_country to tell me which country is the best one."}],"stream":false,"tools":[{"type":"function","function":{"name":"best_country","description":"A tool to specify the best country","parameters":{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"country":{"type":"string","enum":["USA","Canada"]}},"additionalProperties":false,"type":"object","required":["country"]}}}]}
        headers:
            Content-Type:
                - application/json; charset=utf-8
        url: https://api.deepseek.com/chat/completions
        method: POST
      response:
        proto: HTTP/2.0
        proto_major: 2
        proto_minor: 0
        content_length: -1
        uncompressed: true
        body: |4-
            {"id":"3d085583-88d6-4b86-b9b0-42694b440e4c","object":"chat.completion","created":1754774744,"model":"deepseek-reasoner","choices":[{"index":0,"message":{"role":"assistant","content":"I'll call the `best_country` tool to determine the best country between the USA and Canada.","reasoning_content":"We are asked to call the tool `best_country` to determine which country is the best between USA and Canada.\n The tool `best_country` requires one argument: `country` which is an enum of either \"USA\" or \"Canada\".\n Since the question is about which is better, we must choose one. However, note that the tool does not take a comparison but returns the best one.\n Since the tool is designed to return the best country, we can call it without any input for comparison? Actually, the tool requires the country to be specified? \n But looking at the parameters, it requires a single country? That doesn't make sense because we are comparing two.\n\n Let me re-read the tool: \n   \"name\": \"best_country\",\n   \"description\": \"A tool to specify the best country\"\n\n And the parameters: it requires a property \"country\" which is one of the two.\n\n However, note that the tool does not take two countries, it takes one. But the description says \"specify the best country\". \n How can we use this tool to compare?\n\n Actually, the tool might be designed to return whether the given country is the best? But that doesn't match the description.\n\n Alternatively, the tool might be designed to return the best country without any input? But the parameters require a country.\n\n This is confusing. Let me look again: the parameters are required and it's an enum of two. The tool expects one of them? But why?\n\n Alternatively, perhaps the tool is designed to return the best country and ignore the input? But then why require an input?\n\n Given the ambiguity, I think we must follow the function signature. The function requires a country. But which one to pass?\n\n The user's question: \"I wonder if the USA is a better country than Canada?\"\n\n We are to call the tool to tell which is the best.\n\n How about we call the tool twice? But the function doesn't return a boolean, it returns ... wait, the function doesn't specify a return type.\n\n Actually, the function signature only describes the input parameters. The output is not defined.\n\n This is a problem. We are to call the tool, but we don't know what it returns.\n\n Alternatively, we are to generate the tool call as per the parameters. The tool might return a string or boolean? We don't know.\n\n Given the constraints, we must design the call appropriately.\n\n But note: the tool's description is \"A tool to specify the best country\". So it might return the best country? Then why input?\n\n Alternatively, the input might be ignored? Or perhaps the input is used as a candidate and the tool returns if it is the best? \n\n Since we don't have the implementation, we have to assume the intended use.\n\n The user wants to know which is the best: USA or Canada.\n\n We can call the tool with one of them and see what it returns? But we cannot because we are only allowed to call the tool once? And we don't know the return type.\n\n Alternatively, we might call the tool without any input? But the input is required.\n\n This function design is flawed for the question.\n\n However, note that the tool has an enum of two countries. And we are required to pass one. But the tool might be designed to return the best one regardless of the input? \n\n Since we must choose, let's try to think: the tool might be designed to take a country and then confirm if it is the best? But then we would have to call twice to compare.\n\n But we are only allowed to call the tool once? The problem doesn't specify.\n\n Alternatively, we can call the tool with the country set to \"USA\" and then with \"Canada\", but the function does not allow multiple countries at once.\n\n We are stuck.\n\n However, looking at the problem again: the tool is named `best_country` and it requires a single country from the enum. The description says \"specify the best country\". \n\n What if we interpret it as: the tool is designed to return the best country and the input is ignored? Then we can pass either? But the input is required.\n\n Alternatively, the input might be used as a default? \n\n Given the ambiguity, we must follow the function signature. We are required to pass a country. Since we don't know which one is best, we can choose arbitrarily? But then how do we get the answer?\n\n Alternatively, we can call the tool with one country and then use the result? But we don't know the result structure.\n\n This is a challenge.\n\n But note: the assistant is expected to call the tool. We must generate a call. We choose one arbitrarily? \n\n However, the tool might be implemented to return the best country regardless of the input? Then we can pass any country. Let's pass \"USA\" and see what the tool returns.\n\n Alternatively, the tool might be implemented to return the country passed if it is the best? But then we don't know if Canada is better.\n\n We are in a loop.\n\n Alternatively, the tool might be implemented to return the best country and the input is a placeholder? \n\n Since the problem doesn't specify, we'll have to make an assumption.\n\n Let's assume the tool returns the best country regardless of the input. Then we can call it with any country and get the best.\n\n So we can do:\n\n   best_country(country=\"USA\")\n\n and expect it to return, say, \"Canada\" if Canada is best.\n\n But the function signature doesn't specify the return. So we cannot rely on that.\n\n Alternatively, the tool might return a boolean: true if the passed country is the best, false otherwise? Then we would call:\n\n   call best_country with \"USA\" -> if true, then USA is best, else Canada is best.\n\n   call best_country with \"Canada\" -> if true, then Canada is best, else USA.\n\n But we only need one call? Because if we call for USA and it returns false, then Canada must be the best? Since there are only two.\n\n So we can do:\n\n   Call best_country with country=\"USA\"\n   If it returns true -> USA is best.\n   If it returns false -> then the best must be Canada.\n\n But note: the function signature does not define the return type. We are in a simulated environment? We don't have the actual function.\n\n However, the problem says: \"Call the tool best_country to tell me which country is the best one.\"\n\n We are to generate the tool call and then interpret the result.\n\n Since we don't have the implementation, we have to make a call and then use the result.\n\n But the tool call we generate must be in the required format.\n\n So we decide to call the tool with \"USA\" and then based on the result we can tell.\n\n However, we are only generating the call. The actual result will be provided by the environment.\n\n So we generate:\n\n   best_country(country=\"USA\")\n\n Then we will get a result. Let's assume the result is a boolean? Or a string? \n\n The problem doesn't specify, so we have to be flexible.\n\n Alternatively, we can design the tool call and then the system will run it and give us the result.\n\n So we do:\n\n   tool_call: best_country with country=\"USA\"\n\n   then we get a response, say `true` meaning USA is the best, or `false` meaning it isn't.\n\n   or we might get a string: \"USA\" or \"Canada\".\n\n But the tool signature doesn't specify.\n\n Given the ambiguity, we must rely on the tool's description: it is to specify the best country.\n\n So it might return the string of the best country.\n\n Then we can call it with any country and it returns the best one.\n\n So we can do:\n\n   best_country(country=\"USA\")  -> returns \"Canada\" meaning Canada is best.\n\n   or returns \"USA\" meaning USA is best.\n\n Then we can answer accordingly.\n\n But note: the tool requires the input, but the input might be ignored? Or it might be used as a hint? We don't know.\n\n We'll call it with \"USA\" and then use the returned string.\n\n Alternatively, the tool might return an object? But the signature doesn't say.\n\n Since we are in a constrained environment and the tool signature only defines input, we must assume the output is the best country as a string.\n\n So plan:\n\n   Step 1: Call best_country with country=\"USA\" (arbitrarily chosen)\n   Step 2: Get the result, which is a string: either \"USA\" or \"Canada\"\n   Step 3: Then we can say: \"The best country is [result].\"\n\n But what if the tool returns something else? We have to assume it returns the best country.\n\n Alternatively, the tool might return a boolean? Then we would interpret:\n\n   If we passed \"USA\" and got true, then USA is best.\n   If we passed \"USA\" and got false, then Canada is best.\n\n We don't know. But note: the tool description says \"specify the best country\", so it is more natural to return the country.\n\n Let's go with returning the country.\n\n So we call:\n\n   best_country(country=\"USA\")\n\n   and then we get a string.\n\n But note: the tool signature doesn't specify the return, so we cannot be sure.\n\n However, the problem says to call the tool to tell which is best.\n\n We'll generate the call and then the system will provide the result.\n\n So we write the call and then we will have to interpret the result when it comes.\n\n But in this step, we are only generating the call.\n\n So we generate:\n\n   function call: best_country with argument country=\"USA\"\n\n Then, when we get the result, we can output:\n\n   \"The best country is {result}.\"\n\n But what if the result is not one of the two? Then we have an error.\n\n Alternatively, we can call without relying on the input? But we must pass an input.\n\n Given the constraints, we proceed.\n\n However, note: the tool might be designed to require no input? But the signature requires one.\n\n This is a problem in the design of the tool. But we must work with what we have.\n\n Alternatively, we can call the tool with a null value? But the signature doesn't allow null.\n\n We must choose one of the two.\n\n We choose \"USA\".\n\n So we call:\n\n   best_country(country=\"USA\")\n\n And then we get a result.\n\n But note: the problem doesn't specify the implementation. We are in a simulation.\n\n Since we are to generate the tool call, we generate:\n\n   {\n        \"name\": \"best_country\",\n        \"arguments\": {\n            \"country\": \"USA\"\n        }\n   }\n\n Then the system will run the tool and return the result.\n\n We don't know the result yet, so we cannot write the final answer.\n\n But the problem says: \"Call the tool best_country to tell me which country is the best one.\"\n\n So we are to call the tool and then use the result.\n\n We'll have to wait for the result.\n\n However, in this step we are only to generate the tool call.\n\n So we generate the tool call and then the system will provide the result.\n\n But note: the assistant is expected to output the tool call and then later output the answer.\n\n We break the response into two parts:\n\n   Part 1: Tool call\n   Part 2: After getting the result, the answer.\n\n But in one response? We cannot. We have to do it in steps.\n\n How the system works: we output a tool call, then the system runs it and gives us the result, then we output the answer.\n\n So in this step, we output the tool call.\n\n Let's do it.","tool_calls":[{"index":0,"id":"call_0_49e94c28-42c3-4102-8107-07dfb15727a9","type":"function","function":{"name":"best_country","arguments":"{\"country\":\"USA\"}"}}]},"logprobs":null,"finish_reason":"tool_calls"}],"usage":{"prompt_tokens":176,"completion_tokens":2467,"total_tokens":2643,"prompt_tokens_details":{"cached_tokens":64},"completion_tokens_details":{"reasoning_tokens":2425},"prompt_cache_hit_tokens":64,"prompt_cache_miss_tokens":112},"system_fingerprint":"fp_393bca965e_prod0623_fp8_kvcache"}
        headers:
            Access-Control-Allow-Credentials:
                - "true"
            Cf-Cache-Status:
                - DYNAMIC
            Cf-Ray:
                - 96ca53e60ff5a2a8-YUL
            Content-Type:
                - application/json
            Server:
                - cloudflare
            Strict-Transport-Security:
                - max-age=31536000; includeSubDomains; preload
            Vary:
                - origin, access-control-request-method, access-control-request-headers
            X-Content-Type-Options:
                - nosniff
            X-Ds-Trace-Id:
                - 2f3ad676922886668e5a6c89c8d91169
        status: 200 OK
        code: 200
        duration: 426ms

// Leverage the content.jpg file generated in text-to-image example to ask
// Gemini 2.5 Flash to change the image with a prompt and ask the models to
// explain what it did.
//
// This requires `GEMINI_API_KEY` (https://aistudio.google.com/apikey)
// environment variable to authenticate.

package main

import (
	"context"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"

	"github.com/maruel/genai"
	"github.com/maruel/genai/providers/gemini"
)

func main() {
	ctx := context.Background()
	// Warning: This is a bit expensive.
	opts := genai.ProviderOptions{
		Model:            "gemini-2.5-flash-image-preview",
		OutputModalities: genai.Modalities{genai.ModalityImage, genai.ModalityText},
	}
	c, err := gemini.New(ctx, &opts, nil)
	if err != nil {
		log.Fatal(err)
	}
	// Reuse the image generated by example text-to-image.
	f, err := os.Open("content.jpg")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	msgs := genai.Messages{
		genai.Message{Requests: []genai.Request{
			{Text: "I'd like you to generate a new image and add more animals in it. Tell me which animals you added and why."},
			{Doc: genai.Doc{Src: f}},
		}},
	}
	result, err := c.GenSync(ctx, msgs, &gemini.Options{ThinkingBudget: 0})
	if err != nil {
		log.Fatal(err)
	}
	for _, r := range result.Replies {
		if r.Doc.IsZero() {
			fmt.Println(r.Text)
			continue
		}
		// The image can be returned as an URL or inline, depending on the provider.
		var src io.Reader
		if r.Doc.URL != "" {
			req, err := c.HTTPClient().Get(r.Doc.URL)
			if err != nil {
				log.Fatal(err)
			} else if req.StatusCode != http.StatusOK {
				log.Fatal(req.StatusCode)
			}
			src = req.Body
			defer req.Body.Close()
		} else {
			src = r.Doc.Src
		}
		b, err := io.ReadAll(src)
		if err != nil {
			log.Fatal(err)
		}
		name := r.Doc.GetFilename()
		fmt.Printf("Wrote: %s\n", name)
		if err = os.WriteFile(name, b, 0o644); err != nil {
			log.Fatal(err)
		}
	}
}
